LORENZO:

fluent interface for JointTrajectoryPoint
fluent interface for JointTrajectory

removed coordination.Header, since it's just the same as the one taken from Ros: ros.msgs.std_msgs.Header

default new Header(0, new Time(), "") in JointTrajectory

default new Duration(120, 0) in JointTrajectoryPoint

method for single JointTrajectoryPoint
(we always use an array with a single trajectory point)

simplified JointTrajectory creation

Example of refactoring Afterpose

val jointTrajectoryPoints = new JointTrajectoryPoint();
jointTrajectoryPoints.positions = Arrays.asList(0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
// jointTrajectoryPoints.velocities=velocities;
jointTrajectoryPoints.time_from_start.nsecs = 0;
jointTrajectoryPoints.time_from_start.secs = 120;
// JointTrajectory Initialization
val JointTrajectory after_pose = new JointTrajectory();
// val pointtraject = new JointTrajectoryPoint[]; 
var List<JointTrajectoryPoint> list = Arrays.asList(jointTrajectoryPoints);
after_pose.points = list;
after_pose.joint_names = Arrays.asList("joint1", "joint2", "joint3", "joint4", "joint5", "joint6");
after_pose.header.stamp.secs = 0;
after_pose.header.stamp.nsecs = 0;
after_pose.header.frame_id = "";

---->

val JointTrajectory afterPose = new JointTrajectory()
	.positions(#[
		0.000, 0.000, 0.000, 0.000, 0.000, 0.000
	])
	.jointNames(#[
		"joint1", "joint2", "joint3", "joint4", "joint5", "joint6"
	]);


After_pick

val jointTrajectoryPoints = new JointTrajectoryPoint();
jointTrajectoryPoints.positions = Arrays.asList(-3.1415, -0.2862, -0.5000, 3.1400, 1.6613, -0.0142);
// jointTrajectoryPoints.velocities=velocities;
jointTrajectoryPoints.time_from_start.nsecs = 0;
jointTrajectoryPoints.time_from_start.secs = 120;
// JointTrajectory Initialization
val JointTrajectory after_pick = new JointTrajectory();
var List<JointTrajectoryPoint> list = Arrays.asList(jointTrajectoryPoints);
after_pick.points = list;
after_pick.joint_names = Arrays.asList("joint1", "joint2", "joint3", "joint4", "joint5", "joint6");
after_pick.header.stamp.secs = 0;
after_pick.header.stamp.nsecs = 0;
after_pick.header.frame_id = "";

----->

val JointTrajectory afterPick = new JointTrajectory()
	.positions(#[
		-3.1415, -0.2862, -0.5000, 3.1400, 1.6613, -0.0142
	])
	.jointNames(#[
		"joint1", "joint2", "joint3", "joint4", "joint5", "joint6"
	]);

Refactored PoseStamped

val giveobject = new PoseStamped();
giveobject.header.frame_id = frame_id;
giveobject.pose.position.x = x;
giveobject.pose.position.y = y;
giveobject.pose.orientation.w = w;

---->

val giveobject = new PoseStamped()
	.headerFrameId(frame_id)
	.posePositionXY(x, y)
	.poseOrientation(w);

For Twist

These assignments are useless to me, since everything is initialized to 0.0, I seem to understand

	val twistMsg = new Twist();
	twistMsg.linear.x = 0.0;
	twistMsg.angular.y = 0.0;

so I simply removed the assignments to x and y

TODO

consistent names for processes, e.g., AfterPose, AfterPick, etc.

is this default OK for all the cases?

.timeFromStart(new Duration(120, 0));
