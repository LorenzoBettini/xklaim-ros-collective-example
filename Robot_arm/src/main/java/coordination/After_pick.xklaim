package xklaim.coordination

import coordination.JointTrajectory
import coordination.JointTrajectoryPoint
import java.util.Arrays
import java.util.List
import ros.Publisher
import ros.RosBridge
import ros.SubscriptionRequestMsg

proc After_pick() {
	val rosbridgeWebsocketURI = "ws://0.0.0.0:9090"

	// Create the bridge and connect it to the ROS bridge
	val bridge = new RosBridge()
	bridge.connect(rosbridgeWebsocketURI, true)

	// Initialize a publisher for the topic related to the control of the robot's arm
	val pub = new Publisher("/arm_controller/command", "trajectory_msgs/JointTrajectory", bridge);

	// subscribe to get the actual state of the robot's arms
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/gripper_controller/state").setType(
			"control_msgs/JointTrajectoryControllerState").setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			val error = data.get("msg").get("actual").get("positions");
			// this is a list of the desire positions of the third action "grasp"
			val List<Double> desire = Arrays.asList(0.019927757424255833, -0.010904802339570573);

			var sum = 0.0;
			for (var i = 0; i <= 1; i = i + 1) {
				sum = sum + Math.pow(error.get(i).asDouble() - desire.get(i), 2.0);
			}
			val norm = Math.sqrt(sum);

			var tol = 0.007;
			// var String shape="short";
			// switch (shape) {
			// case "long": {
			// tol = 0.007}
			// case "short":{
			// tol = 0.008;         
			// }  }
			if (norm <= tol) {
				println(String.format("I picked the object"))
				// performing the referent position 
				val jointTrajectoryPoints = new JointTrajectoryPoint()
					.positions(
						Arrays.asList(
							-3.1415, -0.2862, -0.5000, 3.1400, 1.6613, -0.0142
						));
				// JointTrajectory Initialization
				val JointTrajectory afterPick = new JointTrajectory()
					.points(Arrays.asList(jointTrajectoryPoints))
					.jointNames(
						Arrays.asList("joint1", "joint2", "joint3", "joint4", "joint5", "joint6")
					);
				pub.publish(afterPick);
				bridge.unsubscribe("/gripper_controller/state");
			}
		]
	)
}
